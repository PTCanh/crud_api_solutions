[
{
	"uri": "https://ptcanh.github.io/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "AWS Lambda AWS Lambda is a serverless computing service that lets you run code without managing servers. It is widely used for handling short tasks, such as data processing, API calls, or managing events.\nAdvantages of using AWS Lambda:\nNo server management: AWS automatically handles resource allocation and scaling. Event-driven execution: Runs code in response to events, such as HTTP requests (when integrated with API Gateway) or changes in DynamoDB data. Pay-as-you-go: You only pay for the execution time and number of requests.\nApplication in CRUD API: Lambda handles specific API functions like creating, reading, updating, and deleting resources.\nAmazon DynamoDB DynamoDB is a fully managed NoSQL database by AWS, designed for applications requiring high performance and scalable solutions.\nAdvantages of using Amazon DynamoDB:\nHigh performance: Optimized to handle millions of requests per second with low latency. No infrastructure management: DynamoDB automatically scales and backs up data. Seamless integration: Works efficiently with AWS Lambda, API Gateway, and other AWS services. Application in CRUD API: DynamoDB serves as the application’s data store. You perform create, read, update, and delete operations on data stored in DynamoDB tables.\nAWS API Gateway API Gateway is an AWS service that enables you to create, deploy, and manage RESTful or WebSocket APIs. Advantages of using API Gateway:\nSeamless integration with Lambda: Easily connects API Gateway with AWS Lambda to process requests. Security: Supports API key management, rate limiting, and authentication (IAM, Lambda Authorizer). Multi-protocol support: Includes REST, HTTP, and WebSocket. Application in CRUD API: API Gateway acts as the entry point for the API, receiving HTTP requests (GET, POST, PUT, DELETE) and routing them to the appropriate Lambda functions for processing.\nCRUD API Workflow Summary The user sends an HTTP request to API Gateway. API Gateway forwards the request to the corresponding Lambda function. Lambda handles the logic and interacts with DynamoDB to perform operations on the data. Lambda returns the result via API Gateway, which is sent back to the user. This system is not only flexible but also cost-efficient due to its pay-as-you-go resource model.\n"
},
{
	"uri": "https://ptcanh.github.io/2-preparation/2.1-create-a-dynamodb-table/",
	"title": "Create a DynamoDB table",
	"tags": [],
	"description": "",
	"content": "Here’s how to create a DynamoDB table for storing data for your API, with each item having a unique ID that will be used as the partition key for the table.\nTo create a DynamoDB table: Open the DynamoDB Console Select Create table. For Table name, enter http-crud-tutorial-items.\nFor Partition key, enter id. Select Create table. Successfully created a DynamoDB table: "
},
{
	"uri": "https://ptcanh.github.io/",
	"title": "CRUD API Solutions",
	"tags": [],
	"description": "",
	"content": "Building a CRUD API with AWS Lambda and DynamoDB Overall This guide covers how to create a serverless CRUD (Create, Read, Update, Delete) API using AWS Lambda and DynamoDB. You’ll utilize API Gateway to route HTTP requests to a Lambda function, which interacts with a DynamoDB table for data storage. The steps include:\nContent Introduction Preparation) Test Your API Clean Up Resources "
},
{
	"uri": "https://ptcanh.github.io/2-preparation/2.2-create-a-lambda-function/",
	"title": "Create a Lambda Function",
	"tags": [],
	"description": "",
	"content": "Create a Lambda function to handle the backend for your API, performing Create, Read, Update, and Delete (CRUD) operations on DynamoDB. The function uses events from API Gateway to determine the appropriate action. For simplicity, this guide uses a single function, though it’s best practice to create separate functions for each route.\nCreate a Lambda Function: Log in to the Lambda Console Click Create a function For Function name, enter http-crud-tutorial-function.\nFor Runtime, select the latest supported version of Node.js or Python. Under Permissions, click Change default execution role.\nChoose Create a new role from AWS policy templates.\nFor Role name, enter http-crud-tutorial-role-demo.\nFor Policy templates, select Simple microservice permissions. To grant the Lambda function access to DynamoDB.\nClick Create function. Open the function in the code editor, replace its contents with the code below, and click Deploy to update the function.\nimport { DynamoDBClient } from \u0026#34;@aws-sdk/client-dynamodb\u0026#34;; import { DynamoDBDocumentClient, ScanCommand, PutCommand, GetCommand, DeleteCommand, } from \u0026#34;@aws-sdk/lib-dynamodb\u0026#34;; const client = new DynamoDBClient({}); const dynamo = DynamoDBDocumentClient.from(client); const tableName = \u0026#34;http-crud-tutorial-items\u0026#34;; export const handler = async (event, context) =\u0026gt; { let body; let statusCode = 200; const headers = { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, }; try { switch (event.routeKey) { case \u0026#34;DELETE /items/{id}\u0026#34;: await dynamo.send( new DeleteCommand({ TableName: tableName, Key: { id: event.pathParameters.id, }, }) ); body = `Deleted item ${event.pathParameters.id}`; break; case \u0026#34;GET /items/{id}\u0026#34;: body = await dynamo.send( new GetCommand({ TableName: tableName, Key: { id: event.pathParameters.id, }, }) ); body = body.Item; break; case \u0026#34;GET /items\u0026#34;: body = await dynamo.send( new ScanCommand({ TableName: tableName }) ); body = body.Items; break; case \u0026#34;PUT /items\u0026#34;: let requestJSON = JSON.parse(event.body); await dynamo.send( new PutCommand({ TableName: tableName, Item: { id: requestJSON.id, price: requestJSON.price, name: requestJSON.name, }, }) ); body = `Put item ${requestJSON.id}`; break; default: throw new Error(`Unsupported route: \u0026#34;${event.routeKey}\u0026#34;`); } } catch (err) { statusCode = 400; body = err.message; } finally { body = JSON.stringify(body); } return { statusCode, body, headers, }; }; Lambda Function Successfully Created "
},
{
	"uri": "https://ptcanh.github.io/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to prepare:\nContent to prepare: Create a DynamoDB table Create a Lambda function Create an HTTP API Create Routes Create an Integration Assign Integration to Routes "
},
{
	"uri": "https://ptcanh.github.io/2-preparation/2.3-create-an-http-api/",
	"title": "Create an HTTP API",
	"tags": [],
	"description": "",
	"content": "An HTTP API provides an HTTP endpoint for your Lambda function. In this step, you’ll create a blank API. In subsequent steps, you’ll configure routes and integrations to connect the API to your Lambda function\nCreate an HTTP API Log in to the API Gateway Console\nSelect Create API, and then for HTTP API, click Build. For API name, enter http-crud-tutorial-api-demo.\nClick Next. Under Configure routes, click Next to skip route creation for now (you’ll configure routes later). Review the stage that API Gateway creates for you, then click Next Click Create. HTTP API Created Successfully: "
},
{
	"uri": "https://ptcanh.github.io/3-test-your-api/",
	"title": "Test Your API",
	"tags": [],
	"description": "",
	"content": "To ensure your API is working correctly curl commands to interact with it.\nSteps to Retrieve the API URL Log in to the API Gateway Console.\nSelect your API.\nNote the URL gọi API của bạn. displayed on the Details page Copy the full API Invoke URL. It should look like: https://vp87s7rd3h.execute-api.ap-southeast-1.amazonaws.com/\nCreate or Update an Item: Use the following command to create or update an item. This command sends a request body with an ID, price, and name curl -X \u0026#34;PUT\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;{\\\u0026#34;id\\\u0026#34;: \\\u0026#34;123\\\u0026#34;, \\\u0026#34;price\\\u0026#34;: 12345, \\\u0026#34;name\\\u0026#34;: \\\u0026#34;myitem\\\u0026#34;}\u0026#34; https://vp87s7rd3h.execute-api.ap-southeast-1.amazonaws.com/items Retrieve All Items: Use this command to list all items. curl https://vp87s7rd3h.execute-api.ap-southeast-1.amazonaws.com/items Retrieve a Single Item by ID: Use this command to get a specific item by its ID curl https://vp87s7rd3h.execute-api.ap-southeast-1.amazonaws.com/items/123 Delete an Item: Use this command to delete an item by its ID curl -X \u0026#34;DELETE\u0026#34; https://vp87s7rd3h.execute-api.ap-southeast-1.amazonaws.com/items/123 The results: "
},
{
	"uri": "https://ptcanh.github.io/4-clean-up-resources/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "To avoid unnecessary costs, delete the resources you created during this exercise. The following steps will remove the HTTP API, Lambda function, and related resources.\nDelete the DynamoDB Table Go to the DynamoDB Console. Select your table.\nClick Delete. Confirm your choice by clicking Delete. Delete the HTTP API Log in to the API Gateway Console. On the APIs, page, select your API.\nClick Delete. Confirm by selecting Delete. Delete the Lambda Function Go to the Lambda Console. On the Functions page, select your function. Click Actions, then select Delete. Confirm by selecting Delete. Delete the Lambda Execution Role Open the AWS IAM Console Go to Roles and select the Lambda role, for example, http-crud-tutorial-role.\nClick Delete role. Confirm by selecting delete. "
},
{
	"uri": "https://ptcanh.github.io/2-preparation/2.4-create-routes/",
	"title": "Create Routes",
	"tags": [],
	"description": "",
	"content": "Create Routes Routes define how API requests are sent to backend resources. A route consists of an HTTP method and a resource path, such as GET /items. For this example, we’ll create four routes.\nGET /items/{id} GET /items PUT /items DELETE /items/{id} Steps to Create Routes Login to the API Gateway Console\nSelect your API Go to Routes\nClick Create For Method, choose GET.\nFor Path, enter /items/{id}. The {id} part is a path parameter that API Gateway will extract from the request URL.\nClick Create Repeat steps 4-7 for GET /items, DELETE /items/{id}, and PUT /items "
},
{
	"uri": "https://ptcanh.github.io/2-preparation/2.5-create-an-integration/",
	"title": "Create an Integration",
	"tags": [],
	"description": "",
	"content": "Create an Integration To connect a route to a backend resource, you need to create an integration. In this example, you’ll configure a Lambda integration that handles all API routes. This integration ensures incoming requests are routed to the Lambda function for processing, making it the core of your API.\nLog in to the API Gateway Console.\nSelect APIs Go to Integrations\nClick Manage integrations, then select Create At Attach this integration to a route, choose a API route.\nFor Integration type, choose Lambda function.\nIn Lambda function, choose the name of your Lambda function http-crud-tutorial-function\nClick Create. "
},
{
	"uri": "https://ptcanh.github.io/2-preparation/2.6-assign-integration-to-routes/",
	"title": "Assign Integrations to Routes",
	"tags": [],
	"description": "",
	"content": "In this example, you’ll use the same Lambda integration for all routes. Once the integration is assigned to each route, the Lambda function will be invoked whenever a request is made to your API\nSteps to Assign Integrations to Routes: Log in to the API Gateway Console.\nSelect your API.\nChoose Routes from the left menu.\nSelect a route to assign the integration.\nUnder Choose an existing integration, select the Lambda function http-crud-tutorial-function.\nClick Attach integration. Repeat steps 4-6 for all routes "
},
{
	"uri": "https://ptcanh.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ptcanh.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]